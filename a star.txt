import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Cost from start
        self.h = 0  # Heuristic to goal
        self.f = 0  # Total cost

    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):
        return self.f < other.f

def astar(grid, start, goal):
    open_list = []
    closed_set = set()
    start_node = Node(start)
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        if current_node.position == goal:
            return reconstruct_path(current_node)

        closed_set.add(current_node.position)

        for move in [(0, -1), (0, 1), (-1, 0), (1, 0)]:
            neighbor_pos = (current_node.position[0] + move[0], current_node.position[1] + move[1])
            if (0 <= neighbor_pos[0] < len(grid) and
                0 <= neighbor_pos[1] < len(grid[0]) and
                grid[neighbor_pos[0]][neighbor_pos[1]] == 0 and
                neighbor_pos not in closed_set):

                neighbor_node = Node(neighbor_pos, current_node)
                neighbor_node.g = current_node.g + 1
                neighbor_node.h = (neighbor_node.position[0] - goal[0]) ** 2 + \
                                  (neighbor_node.position[1] - goal[1]) ** 2
                neighbor_node.f = neighbor_node.g + neighbor_node.h

                if not any(neighbor_node == open_node and neighbor_node.g >= open_node.g for open_node in open_list):
                    heapq.heappush(open_list, neighbor_node)

    return None

def reconstruct_path(node):
    path = []
    while node:
        path.append(node.position)
        node = node.parent
    return path[::-1]

# Example grid
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

start, goal = (0, 0), (4, 4)
path = astar(grid, start, goal)
print("Path found:", path if path else "No path found.")
